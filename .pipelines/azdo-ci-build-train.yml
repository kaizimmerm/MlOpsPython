pr: none
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/
    - environment_setup/
    - ml_service/util/create_scoring_image.*
    - ml_service/util/smoke_test_scoring_service.py

variables:
- template: azdo-variables.yml
- group: devopsforai-aml-vg


stages:
- stage: 'Model_CI'
  displayName: 'Model CI'
  jobs:
  - job: "Model_CI_Pipeline"
    displayName: "Model CI Pipeline"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-base-pipeline.yml
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          # Invoke the Python building and publishing a training pipeline
          python $(Build.SourcesDirectory)/ml_service/pipelines/${{ variables.BUILD_TRAIN_SCRIPT }}
      displayName: 'Publish Azure Machine Learning Pipeline'

- stage: 'Trigger_AML_Pipeline'
  displayName: 'Train model'
  jobs:
  - job: "Get_Pipeline_ID"
    condition: and(succeeded(), eq(coalesce(variables['auto-trigger-training'], 'true'), 'true'))
    displayName: "Get Pipeline ID for execution"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python $(Build.SourcesDirectory)/ml_service/pipelines/run_train_pipeline.py --output_pipeline_id_file "pipeline_id.txt" --skip_train_execution
          # Set AMLPIPELINEID variable for next AML Pipeline task in next job
          AMLPIPELINEID="$(cat pipeline_id.txt)"
          echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$AMLPIPELINEID"
      name: 'getpipelineid'
      displayName: 'Get Pipeline ID'
    - bash: |
          # Generate a hyperparameter value as a random number between 0 and 1.
          # A random value is used here to make the Azure ML dashboards "interesting" when testing
          # the solution sample.
          alpha=$(printf "0.%03d\n" $((($RANDOM*1000)/32767)))
          echo "Alpha: $alpha"
          echo "##vso[task.setvariable variable=ALPHA;isOutput=true]$alpha"
      name: 'getalpha'
      displayName: 'Generate random value for hyperparameter alpha'
  - job: "Run_ML_Pipeline"
    dependsOn: "Get_Pipeline_ID"
    displayName: "Trigger ML Training Pipeline"
    pool: server
    variables:
      AMLPIPELINE_ID: $[ dependencies.Get_Pipeline_ID.outputs['getpipelineid.AMLPIPELINEID'] ]
      ALPHA: $[ dependencies.Get_Pipeline_ID.outputs['getalpha.ALPHA'] ]
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-restApi-task.MLPublishedPipelineRestAPITask@0
      displayName: 'Invoke ML pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        PipelineId: '$(AMLPIPELINE_ID)'
        ExperimentName: '$(EXPERIMENT_NAME)'
        PipelineParameters: '"ParameterAssignments": {"model_name": "$(MODEL_NAME)", "hyperparameter_alpha": "$(ALPHA)"}'
  - job: "Training_Run_Report"
    dependsOn: "Run_ML_Pipeline"
    displayName: "Determine if evaluation succeeded and new model is registered"
    pool:
        vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-template-get-model-version.yml
- stage: 'Deploy_ACI'
  displayName: 'Deploy to ACI'
  dependsOn: Trigger_AML_Pipeline
  condition: and(succeeded(), variables['ACI_DEPLOYMENT_NAME'])
  jobs:
  - job: "Deploy_ACI"
    displayName: "Deploy to ACI"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-template-get-model-version.yml
    - task: ms-air-aiagility.vss-services-azureml.azureml-model-deploy-task.AMLModelDeploy@0
      displayName: 'Azure ML Model Deploy'
      inputs:
        azureSubscription: $(WORKSPACE_SVC_CONNECTION)
        modelSourceType: manualSpec
        modelName: '$(MODEL_NAME)'
        modelVersion: $(MODEL_VERSION)
        inferencePath: '$(Build.SourcesDirectory)/code/scoring/inference_config.yml'
        deploymentTarget: ACI
        deploymentName: $(ACI_DEPLOYMENT_NAME)
        deployConfig: '$(Build.SourcesDirectory)/code/scoring/deployment_config_aci.yml'
        overwriteExistingDeployment: true
    - task: AzureCLI@1
      displayName: 'Smoke test'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python ml_service/util/smoke_test_scoring_service.py --type ACI --service "$(ACI_DEPLOYMENT_NAME)"

- stage: 'Deploy_AKS'
  displayName: 'Deploy to AKS'
  dependsOn: Deploy_ACI
  condition: and(succeeded(), variables['AKS_DEPLOYMENT_NAME'])
  jobs:
  - job: "Deploy_AKS"
    displayName: "Deploy to AKS"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-template-get-model-version.yml
    - task: ms-air-aiagility.vss-services-azureml.azureml-model-deploy-task.AMLModelDeploy@0
      displayName: 'Azure ML Model Deploy'
      inputs:
        azureSubscription: $(WORKSPACE_SVC_CONNECTION)
        modelSourceType: manualSpec
        modelName: '$(MODEL_NAME)'
        modelVersion: $(MODEL_VERSION)
        inferencePath: '$(Build.SourcesDirectory)/code/scoring/inference_config.yml'
        deploymentTarget: AKS
        aksCluster: $(AKS_COMPUTE_NAME)
        deploymentName: $(AKS_DEPLOYMENT_NAME)
        deployConfig: '$(Build.SourcesDirectory)/code/scoring/deployment_config_aks.yml'
        overwriteExistingDeployment: true
    - task: AzureCLI@1
      displayName: 'Smoke test'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python ml_service/util/smoke_test_scoring_service.py --type AKS --service "$(AKS_DEPLOYMENT_NAME)"

- stage: 'Deploy_Webapp'
  displayName: 'Deploy to Webapp'
  dependsOn: Trigger_AML_Pipeline
  condition: and(succeeded(), variables['WEBAPP_DEPLOYMENT_NAME'])
  jobs:
  - job: "Deploy_Webapp"
    displayName: "Deploy to Webapp"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-template-get-model-version.yml
    - task: AzureCLI@1
      displayName: 'Create scoring image and set IMAGE_LOCATION variable'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python ml_service/util/create_scoring_image.py --output_image_location_file image_location.txt
          # Output image location to Azure DevOps job
          IMAGE_LOCATION="$(cat image_location.txt)"
          echo "##vso[task.setvariable variable=IMAGE_LOCATION]$IMAGE_LOCATION"
    - task: AzureWebAppContainer@1
      name: WebAppDeploy
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: 'AzureResourceConnection'
        appName: '$(WEBAPP_DEPLOYMENT_NAME)'
        containers: '$(IMAGE_LOCATION)'
    - task: AzureCLI@1
      displayName: 'Smoke test'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python ml_service/util/smoke_test_scoring_service.py --type Webapp --service "$(WebAppDeploy.AppServiceApplicationUrl)/score"
